{"ast":null,"code":"import _defineProperty from\"/Users/bob/Desktop/CodingBootcamp/oh-snap-2.0/photo-port/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/bob/Desktop/CodingBootcamp/oh-snap-2.0/photo-port/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/bob/Desktop/CodingBootcamp/oh-snap-2.0/photo-port/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{validateEmail}from'../../utils/helpers';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ContactForm(){//  hook will manage form data and initialize value of the state\nvar _useState=useState({name:'',email:'',message:''}),_useState2=_slicedToArray(_useState,2),formState=_useState2[0],setFormState=_useState2[1];var name=formState.name,email=formState.email,message=formState.message;var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),errorMessage=_useState4[0],setErrorMessage=_useState4[1];// function will sync the internal state of the component formState with the user input from the DOM\nfunction handleChange(e){// validation\nif(e.target.name==='email'){var isValid=validateEmail(e.target.value);console.log(isValid);// isValid conditional statement\nif(!isValid){setErrorMessage('Your email is invalid.');}else{if(!e.target.value.length){setErrorMessage(\"\".concat(e.target.name,\" is required.\"));}else{// no error\nsetErrorMessage('');}}if(!errorMessage){setFormState(_objectSpread(_objectSpread({},formState),{},_defineProperty({},e.target.name,e.target.value)));}}// uses setFormState() to update the formState value for the name property\n// spread operator (...) to retain the other key-value pairs in this object\nsetFormState(_objectSpread(_objectSpread({},formState),{},_defineProperty({},e.target.name,e.target.value)));}function handleSubmit(e){e.preventDefault();console.log(formState);}return/*#__PURE__*/_jsxs(\"section\",{children:[/*#__PURE__*/_jsx(\"h1\",{\"data-testid\":\"h1tag\",children:\"Contact me\"}),/*#__PURE__*/_jsxs(\"form\",{id:\"contact-form\",onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"name\",children:\"Name:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",defaultValue:name,onBlur:handleChange,name:\"name\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"email\",children:\"Email address:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"email\",defaultValue:email,name:\"email\",onBlur:handleChange})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"message\",children:\"Message:\"}),/*#__PURE__*/_jsx(\"textarea\",{name:\"message\",defaultValue:message,onBlur:handleChange,rows:\"5\"})]}),errorMessage&&/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"p\",{className:\"error-text\",children:errorMessage})}),/*#__PURE__*/_jsx(\"button\",{\"data-testid\":\"button\",type:\"submit\",children:\"Submit\"})]})]});}export default ContactForm;","map":{"version":3,"sources":["/Users/bob/Desktop/CodingBootcamp/oh-snap-2.0/photo-port/src/components/Contact/index.js"],"names":["React","useState","validateEmail","ContactForm","name","email","message","formState","setFormState","errorMessage","setErrorMessage","handleChange","e","target","isValid","value","console","log","length","handleSubmit","preventDefault"],"mappings":"8gBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,aAAT,KAA8B,qBAA9B,C,wFAEA,QAASC,CAAAA,WAAT,EAAuB,CAEnB;AACA,cAAkCF,QAAQ,CAAC,CAAEG,IAAI,CAAE,EAAR,CAAYC,KAAK,CAAE,EAAnB,CAAuBC,OAAO,CAAE,EAAhC,CAAD,CAA1C,wCAAOC,SAAP,eAAkBC,YAAlB,eACA,GAAQJ,CAAAA,IAAR,CAAiCG,SAAjC,CAAQH,IAAR,CAAcC,KAAd,CAAiCE,SAAjC,CAAcF,KAAd,CAAqBC,OAArB,CAAiCC,SAAjC,CAAqBD,OAArB,CACA,eAAwCL,QAAQ,CAAC,EAAD,CAAhD,yCAAOQ,YAAP,eAAqBC,eAArB,eACA;AACA,QAASC,CAAAA,YAAT,CAAsBC,CAAtB,CAAyB,CACrB;AACA,GAAIA,CAAC,CAACC,MAAF,CAAST,IAAT,GAAkB,OAAtB,CAA+B,CAC3B,GAAMU,CAAAA,OAAO,CAAGZ,aAAa,CAACU,CAAC,CAACC,MAAF,CAASE,KAAV,CAA7B,CACAC,OAAO,CAACC,GAAR,CAAYH,OAAZ,EACA;AACA,GAAI,CAACA,OAAL,CAAc,CACVJ,eAAe,CAAC,wBAAD,CAAf,CACH,CAFD,IAEO,CACH,GAAI,CAACE,CAAC,CAACC,MAAF,CAASE,KAAT,CAAeG,MAApB,CAA4B,CAC1BR,eAAe,WAAIE,CAAC,CAACC,MAAF,CAAST,IAAb,kBAAf,CACD,CAFD,IAEO,CACH;AACFM,eAAe,CAAC,EAAD,CAAf,CACD,CACJ,CACD,GAAI,CAACD,YAAL,CAAmB,CACfD,YAAY,gCAAMD,SAAN,wBAAkBK,CAAC,CAACC,MAAF,CAAST,IAA3B,CAAkCQ,CAAC,CAACC,MAAF,CAASE,KAA3C,GAAZ,CACH,CACJ,CACD;AACA;AACAP,YAAY,gCAAKD,SAAL,wBAAiBK,CAAC,CAACC,MAAF,CAAST,IAA1B,CAAiCQ,CAAC,CAACC,MAAF,CAASE,KAA1C,GAAZ,CACH,CACD,QAASI,CAAAA,YAAT,CAAsBP,CAAtB,CAAyB,CACrBA,CAAC,CAACQ,cAAF,GACAJ,OAAO,CAACC,GAAR,CAAYV,SAAZ,EACH,CAED,mBACI,wCACE,WAAI,cAAY,OAAhB,wBADF,cAEE,cAAM,EAAE,CAAC,cAAT,CAAwB,QAAQ,CAAEY,YAAlC,wBACM,oCACI,cAAO,OAAO,CAAC,MAAf,mBADJ,cAEI,cAAO,IAAI,CAAC,MAAZ,CAAmB,YAAY,CAAEf,IAAjC,CAAuC,MAAM,CAAEO,YAA/C,CAA6D,IAAI,CAAC,MAAlE,EAFJ,GADN,cAKM,oCACI,cAAO,OAAO,CAAC,OAAf,4BADJ,cAEI,cAAO,IAAI,CAAC,OAAZ,CAAoB,YAAY,CAAEN,KAAlC,CAAyC,IAAI,CAAC,OAA9C,CAAsD,MAAM,CAAEM,YAA9D,EAFJ,GALN,cASM,oCACI,cAAO,OAAO,CAAC,SAAf,sBADJ,cAEI,iBAAU,IAAI,CAAC,SAAf,CAAyB,YAAY,CAAEL,OAAvC,CAAgD,MAAM,CAAEK,YAAxD,CAAsE,IAAI,CAAC,GAA3E,EAFJ,GATN,CAaOF,YAAY,eACT,kCACI,UAAG,SAAS,CAAC,YAAb,UAA2BA,YAA3B,EADJ,EAdV,cAkBM,eAAQ,cAAY,QAApB,CAA6B,IAAI,CAAC,QAAlC,oBAlBN,GAFF,GADJ,CAyBH,CAED,cAAeN,CAAAA,WAAf","sourcesContent":["import React, { useState } from 'react';\nimport { validateEmail } from '../../utils/helpers';\n\nfunction ContactForm() {\n    \n    //  hook will manage form data and initialize value of the state\n    const [formState, setFormState] = useState({ name: '', email: '', message: '' });\n    const { name, email, message } = formState;\n    const [errorMessage, setErrorMessage] = useState('');\n    // function will sync the internal state of the component formState with the user input from the DOM\n    function handleChange(e) {\n        // validation\n        if (e.target.name === 'email') {\n            const isValid = validateEmail(e.target.value);\n            console.log(isValid);\n            // isValid conditional statement\n            if (!isValid) {\n                setErrorMessage('Your email is invalid.');\n            } else {\n                if (!e.target.value.length) {\n                  setErrorMessage(`${e.target.name} is required.`);\n                } else {\n                    // no error\n                  setErrorMessage('');\n                }\n            }\n            if (!errorMessage) {\n                setFormState({ ...formState, [e.target.name]: e.target.value });\n            }\n        }  \n        // uses setFormState() to update the formState value for the name property\n        // spread operator (...) to retain the other key-value pairs in this object\n        setFormState({...formState, [e.target.name]: e.target.value })\n    }\n    function handleSubmit(e) {\n        e.preventDefault();\n        console.log(formState);\n    }\n      \n    return (\n        <section>\n          <h1 data-testid=\"h1tag\">Contact me</h1>\n          <form id=\"contact-form\" onSubmit={handleSubmit}>\n                <div>\n                    <label htmlFor=\"name\">Name:</label>\n                    <input type=\"text\" defaultValue={name} onBlur={handleChange} name=\"name\" />\n                </div>\n                <div>\n                    <label htmlFor=\"email\">Email address:</label>\n                    <input type=\"email\" defaultValue={email} name=\"email\" onBlur={handleChange} />\n                </div>\n                <div>\n                    <label htmlFor=\"message\">Message:</label>\n                    <textarea name=\"message\" defaultValue={message} onBlur={handleChange} rows=\"5\" />\n                </div>\n                {errorMessage && (\n                    <div>\n                        <p className=\"error-text\">{errorMessage}</p>\n                    </div>\n                )}\n                <button data-testid=\"button\" type=\"submit\">Submit</button>\n          </form>\n        </section>\n    )\n}\n    \nexport default ContactForm;"]},"metadata":{},"sourceType":"module"}